# rubocop:disable Style/FrozenStringLiteralComment, Layout/LeadingCommentSpace, Naming/FileName
#!/usr/bin/env ruby
# rubocop:enable Style/FrozenStringLiteralComment, Layout/LeadingCommentSpace, Naming/FileName

# rubocop:disable Style/ExpandPathArguments
$LOAD_PATH << File.expand_path('../../lib', __FILE__)
# rubocop:enable Style/ExpandPathArguments

require 'digest'
require 'time'
require 'ruby-git/object'

RUBY_GIT_DIR = "#{Dir.pwd}/.ruby-git".freeze
INDEX_PATH = "#{RUBY_GIT_DIR}/index".freeze
# rubocop:disable Style/MutableConstant, Layout/HeredocIndentation
COMMIT_MESSAGE_TEMPLATE = <<-TXT
# Title
#
# Body
TXT
# rubocop:enable Style/MutableConstant, Layout/HeredocIndentation

def index_files
  File.open(INDEX_PATH).each_line
end

# rubocop:disable Metrics/MethodLength
def index_tree
  index_files.each_with_object({}) do |line, object|
    sha, _, path = line.split
    segments = path.split('/')
    segments.reduce(object) do |o, s|
      if s == segments.last
        o[segments.last] = sha
        o
      else
        o[s] ||= {}
        o[s]
      end
    end
  end
end

def build_tree(name, tree)
  sha = Digest::SHA1.hexdigest Time.now.iso8601 + name
  object = RubyGit::Object.new sha

  object.write do |file|
    tree.each do |key, value|
      if value.is_a? Hash
        dir_sha = build_tree(key, value)
        file.puts "tree #{dir_sha} #{key}"
      else
        file.puts "blob #{value} #{key}"
      end
    end
  end

  sha
end

def build_commit(tree)
  commit_message_path = "#{RUBY_GIT_DIR}/COMMIT_EDITMSG"

  `echo "#{COMMIT_MESSAGE_TEMPLATE}" > #{commit_message_path}`
  `$VISUAL #{commit_message_path} > /dev/tty`

  message = File.read commit_message_path
  committer = 'user'
  sha = Digest::SHA1.hexdigest Time.now.iso8601 + committer
  object = RubyGit::Object.new sha

  object.write do |file|
    file.puts "tree #{tree}"
    file.puts "author #{committer}"
    file.puts
    file.puts message
  end

  sha
end
# rubocop:enable Metrics/MethodLength

def update_ref(commit_sha)
  current_branch = File.read("#{RUBY_GIT_DIR}/HEAD").strip.split.last

  File.open("#{RUBY_GIT_DIR}/#{current_branch}", 'w') do |file|
    file.print commit_sha
  end
end

def clear_index
  File.truncate INDEX_PATH, 0
end

if index_files.count.zero?
  puts 'Nothing to commit'
  exit(-6)
end

root_sha = build_tree('root', index_tree)
commit_sha = build_commit(root_sha)
update_ref(commit_sha)
